java       
redis 数据类型 :


1.String（字符串）
string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。
string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M

2.Hash（哈希）
Redis hash 是一个键值对集合。
Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。
类似Java里面的Map<String,Object>

3.List（列表）
Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。
它的底层实际是个链表

4.Set（集合）
Redis的Set是string类型的无序集合。它是通过HashTable实现实现的，

5.zset(sorted set：有序集合)
Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。
不同的是每个元素都会关联一个double类型的分数。
redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。.

get set  getset  setnx

线程:


 ThreadLocal : 用于线程中的变量保存
 Semaphore也是一个线程同步的辅助类，可以维护当前访问自身的线程个数，并提供了同步机制。使用Semaphore可以控制同时访问资源的线程个数
 Lock(ReentrantLock) 实现提供了比使用 synchronized 方法和语句可获得的更广泛的锁定操作。此实现允许更灵活的结构，可以具有差别很大的属性，可以支持多个相关的 Condition 对象
 Exchanger  一般用于两个工作线程之间交换数据
 CyclicBarrier 线程计数器
 CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务
 CopyOnWriteArrayList 　　CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。
 这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器
 ReentrantReadWriteLock 读写锁 
 condition 一般与lock同时使用
 
 queue 队列
 
 
 deque 双端队列




 一 : java监听器的原理与实现  (传送门 : https://blog.csdn.net/tfygg/article/details/51638933)

      监听器模型涉及以下三个对象，模型图如下：
			（1）事件：用户对组件的一个操作，称之为一个事件
			（2）事件源：发生事件的组件就是事件源
			（3）事件监听器（处理器）：监听并负责处理事件的方法
		
		
		执行顺序如下：
				1、给事件源注册监听器
				2、组件接受外部作用，也就是事件被触发
				3、组件产生一个相应的事件对象，并把此对象传递给与之关联的事件处理器
				4、事件处理器启动，并执行相关的代码来处理该事件
				
		监听器模式：事件源注册监听器之后，当事件源触发事件，监听器就可以回调事件对象的方法；更形象地说，监听者模式是基于：注册-回调的事件/消息通知处理模式，就是被监控者将消息通知给所有监控者。 
				1、注册监听器：事件源.setListener；
				2、回调：事件源实现onListener。 
				
				
			个人理解 :
			1) 定义事件源接口 (事件源方法)
			2) 定义事件监听器接口 , 放入事件源 对象,   
	


			
 
 事务 :
 
 传播机制： 7 种 Propagation
 	required：如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务。
	supPorts： 如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行。但是对于事务同步的事务管理器，propagation_supports与不使用事务有少许不同。
	not_supported：总是非事务地执行，并挂起任何存在的事务。
	requiresnew：总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起。
	mandatory：如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异常。
	never：总是非事务地执行，如果存在一个活动事务，则抛出异常
	nested：如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性执行。
 
 隔离级别 
	Read uncommitted 读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。
	Read committed 读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。
	Repeatable read 重复读，就是在开始读取数据（事务开启）时，不再允许修改操作
	Serializable  幻读
	
事务特性 :原子性（ Atomicity ）、一致性（ Consistency ）、隔离性（ Isolation ）和持续性（ Durability ）



断言 assert

Assert.notNull(Object object, "object is required")    -    对象非空 
Assert.isTrue(Object object, "object must be true")   -    对象必须为true   
Assert.notEmpty(Collection collection, "collection must not be empty")    -    集合非空  
Assert.hasLength(String text, "text must be specified")   -    字符不为null且字符长度不为0   
Assert.hasText(String text, "text must not be empty")    -     text 不为null且必须至少包含一个非空格的字符  
Assert.isInstanceOf(Class clazz, Object obj, "clazz must be of type [clazz]")    -    obj必须能被正确造型成为clazz 指定的类


spring boot :

@CrossOrigin  处理跨域
 
 
hashmap hashtable concurrentHashMap 区别
 HashMap几乎可以等价于Hashtable，除了HashMap是非synchronized的，并可以接受null(HashMap可以接受为null的键值(key)和值(value)，而Hashtable则不行)。
HashMap是非synchronized，而Hashtable是synchronized，这意味着Hashtable是线程安全的，多个线程可以共享一个Hashtable；而如果没有正确的同步的话，多个线程是不能共享HashMap的。
Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。
另一个区别是HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，
但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。
由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。如果你不需要同步，只需要单一线程，那么使用HashMap性能要好过Hashtable。
HashMap不能保证随着时间的推移Map中的元素次序是不变的。
 
 
一、概念：

线程安全：就是当多线程访问时，采用了加锁的机制；即当一个线程访问该类的某个数据时，会对这个数据进行保护，其他线程不能对其访问，直到该线程读取完之后，其他线程才可以使用。防止出现数据不一致或者数据被污染的情况。
线程不安全：就是不提供数据访问时的数据保护，多个线程能够同时操作某个数据，从而出现数据不一致或者数据污染的情况。
对于线程不安全的问题，一般会使用synchronized关键字加锁同步控制。
线程安全 工作原理： jvm中有一个main memory对象，每一个线程也有自己的working memory，一个线程对于一个变量variable进行操作的时候， 都需要在自己的working memory里创建一个copy,操作完之后再写入main memory。 
当多个线程操作同一个变量variable，就可能出现不可预知的结果。 
而用synchronized的关键是建立一个监控monitor，这个monitor可以是要修改的变量，也可以是其他自己认为合适的对象(方法)，然后通过给这个monitor加锁来实现线程安全，
每个线程在获得这个锁之后，要执行完加载load到working memory 到 use && 指派assign 到 存储store 再到 main memory的过程。才会释放它得到的锁。这样就实现了所谓的线程安全。
二、线程安全(Thread-safe)的集合对象：

Vector 线程安全：
HashTable 线程安全：
StringBuffer 线程安全：
concurrenthashmap 线程安全的
三、非线程安全的集合对象：

ArrayList ： 插入慢,检索快
LinkedList：
		List list = new ArrayList(); // 默认10  线程不安全的  基于数组实现
    List linked = new LinkedList(); // 无大小  线程不安全的 链式  node节点(前一个 当前  下一个)
                                   // get(index) 利用二叉树 前后分割
                                   
                                   
                                   
                                   
HashMap：
HashSet：  不可重复 , 插入快, 检索慢
TreeMap：
TreeSet：
StringBulider：
四、相关集合对象比较：

Vector、ArrayList、LinkedList： 
1、Vector： 
Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。 
2、ArrayList： 
a. 当操作是在一列数据的后面添加数据而不是在前面或者中间，并需要随机地访问其中的元素时，使用ArrayList性能比较好。 
b. ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，
当数组大小不满足时需要增加存储能力，就要讲已经有数组的数据复制到新的存储空间中。当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。 
3、LinkedList： 
a. 当对一列数据的前面或者中间执行添加或者删除操作时，并且按照顺序访问其中的元素时，要使用LinkedList。 
b. LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。
Vector和ArrayList在使用上非常相似，都可以用来表示一组数量可变的对象应用的集合，并且可以随机的访问其中的元素。

ArryList和LinkedList的区别： 
在处理一列数据项时，Java提供了两个类ArrayList和LinkedList，ArrayList的内部实现是基于内部数组Object[]，所以从概念上说它更像数组；然而LinkedList的内部实现是基于一组连接的记录，所以，它更像一个链表结构；所以它们在性能上有很大的差别。 
由上可知，在ArrayList的前面或者中间插入数据的时候，必须将其后的所有数据相应的后移，这样要花费较多的时间；所以，当操作是在一列数据的后面添加数据而不是在前面或者中间，并需要随机地访问其中的元素时，使用ArrayList性能比较好。 
然而访问链表中的某个元素的时候，就必须从链表的一端开始，沿着连接的方向一个一个元素的去查找，直到找到所需的元素为止，所以，当对一列数据的前面或者中间执行添加或者删除操作时，并且按照顺序访问其中的元素时，要使用LinkedList。 
如果在实际的操作中，前面两种情况交替出现，可以考虑使用List这样的通用接口，而不用关心具体的实现，再具体的情况下，它的性能由具体的实现来保证。

HashTable、HashMap、HashSet： 
HashTable和HashMap采用的存储机制是一样的，不同的是： 
1、HashMap： 
a. 采用数组方式存储key-value构成的Entry对象，无容量限制； 
b. 基于key hash查找Entry对象存放到数组的位置，对于hash冲突采用链表的方式去解决； 
c. 在插入元素时，可能会扩大数组的容量，在扩大容量时须要重新计算hash，并复制对象到新的数组中； 
d. 是非线程安全的； 
e. 遍历使用的是Iterator迭代器；

2、HashTable： 
a. 是线程安全的； 
b. 无论是key还是value都不允许有null值的存在；在HashTable中调用Put方法时，如果key为null，直接抛出NullPointerException异常； 
c. 遍历使用的是Enumeration列举；

3、HashSet： 
a. 基于HashMap实现，无容量限制； 
b. 是非线程安全的； 
c. 不保证数据的有序；

TreeSet、TreeMap： 
TreeSet和TreeMap都是完全基于Map来实现的，并且都不支持get(index)来获取指定位置的元素，需要遍历来获取。另外，TreeSet还提供了一些排序方面的支持，例如传入Comparator实现、descendingSet以及descendingIterator等。 
1、TreeSet： 
a. 基于TreeMap实现的，支持排序； 
b. 是非线程安全的；

2、TreeMap： 
a. 典型的基于红黑树的Map实现，因此它要求一定要有key比较的方法，要么传入Comparator比较器实现，要么key对象实现Comparator接口； 
b. 是非线程安全的；

StringBuffer和StringBulider： 
StringBuilder与StringBuffer都继承自AbstractStringBuilder类，在AbstractStringBuilder中也是使用字符数组保存字符串。

1、在执行速度方面的比较：StringBuilder > StringBuffer ； 
2、StringBuffer与StringBuilder，他们是字符串变量，是可改变的对象，每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，不像String一样创建一些对象进行操作，所以速度就快了； 
3、 StringBuilder：线程非安全的； 
4、StringBuffer：线程安全的； 
　 
对于String、StringBuffer和StringBulider三者使用的总结： 
1.如果要操作少量的数据用 = String 
2.单线程操作字符串缓冲区 下操作大量数据 = StringBuilder 
3.多线程操作字符串缓冲区 下操作大量数据 = StringBuffer




过滤器和拦截器的区别： https://www.cnblogs.com/panxuejun/p/7715917.html

　　①拦截器是基于java的反射机制的，而过滤器是基于函数回调。
　　②拦截器不依赖与servlet容器，过滤器依赖与servlet容器。
　　③拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。
　　④拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。
　　⑤在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。

　　⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。

 
 
 filter 是基于 责任链模式 :
 		filterchain 定义了执行下一个filter的方法   , 具体实现由 其子类实现 
 		spring的 filterchain 是 子类的 compositefilter (混合的/复合的filter) 的内部类  virtualfilterchain (虚拟的过滤器链)实现的
 
 
  spring的 filterchain
 
 过滤器  拦截器  执行时机
 
 请求--> filter 过滤器  -->dispatchservlet -->pre执行拦截器 --> 执行目标方法-->post拦截器--> 返回mv-->after拦截器-> 过滤器-->返回前端
 
 https://blog.csdn.net/xiaoyaotan_111/article/details/53817918 
 
 https://www.cnblogs.com/panxuejun/p/7715917.html
 

 
 spring 容器 启动 流程 : 
 
  applicationcontext 的 refresh 方法 (源码) :
 
 
 public void refresh() throws BeansException, IllegalStateException {
		synchronized (this.startupShutdownMonitor) {
			// Prepare this context for refreshing.
			prepareRefresh();

			// Tell the subclass to refresh the internal bean factory.
			初始化BeanFactory：根据配置文件实例化BeanFactory，getBeanFactory()方法由具体子类实现。在这一步里，Spring将配置文件的信息解析成为一个个的BeanDefinition对象并装入到容器的Bean定义注册表（BeanDefinitionRegistry）中，但此时Bean还未初始化；
			obtainFreshBeanFactory()会调用自身的refreshBeanFactory(),而refreshBeanFactory()方法由子类AbstractRefreshableApplicationContext实现，该方法返回了一个创建的DefaultListableBeanFactory对象，这个对象就是由ApplicationContext管理的BeanFactory容器对象。
			这一步的操作相当于，如果我们在自己的应用代码中不用ApplicationContext而直接用BeanFactory时创建BeanFactory对象的操作
			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

			// Prepare the bean factory for use in this context.
			prepareBeanFactory(beanFactory);

			try {
				// Allows post-processing of the bean factory in context subclasses.
				postProcessBeanFactory(beanFactory);

				// Invoke factory processors registered as beans in the context.
				调用工厂后处理器：根据反射机制从BeanDefinitionRegistry中找出所有BeanFactoryPostProcessor类型的Bean，并调用其postProcessBeanFactory()接口方法；
				经过第一步加载配置文件，已经把配置文件中定义的所有bean装载到BeanDefinitionRegistry这个Beanfactory中，对于ApplicationContext应用来说这个BeanDefinitionRegistry类型的BeanFactory就是Spring默认的DefaultListableBeanFactory
				invokeBeanFactoryPostProcessors(beanFactory);

				// Register bean processors that intercept bean creation.
				注册Bean后处理器：根据反射机制从BeanDefinitionRegistry中找出所有BeanPostProcessor类型的Bean，并将它们注册到容器Bean后处理器的注册表中；
				registerBeanPostProcessors(beanFactory);

				// Initialize message source for this context.
				初始化消息源：初始化容器的国际化信息资源；
				initMessageSource();

				// Initialize event multicaster for this context.
				初始化应用上下文事件广播器；
				initApplicationEventMulticaster();

				// Initialize other special beans in specific context subclasses.
				初始化其他特殊的Bean：这是一个钩子方法，子类可以借助这个钩子方法执行一些特殊的操作：
				如AbstractRefreshableWebApplicationContext就使用该钩子方法执行初始化ThemeSource的操作；
				onRefresh();

				// Check for listener beans and register them.
				注册事件监听器；（观察者模式中的观察者角色）
				Spring根据上下文持有的beanfactory对象，从它的BeanDefinitionRegistry中找出所有实现org.springfamework.context.ApplicationListener的bean，将BeanDefinition对象生成bean，注册为容器的事件监听器，实际的操作就是将其添加到事件广播器所提供的监听器注册表中
				registerListeners();

				// Instantiate all remaining (non-lazy-init) singletons.
				初始化singleton的Bean：实例化所有singleton的Bean，并将它们放入Spring容器的缓存中；这就是和直接在应用中使用BeanFactory的区别之处，在创建ApplicationContext对象时，不仅创建了一个BeanFactory对象，并且还应用它实例化所有单实例的bean。（在spring的配置文件中，bean默认为单例，除非在bean的配置中显式指定scope="prototype"）
				finishBeanFactoryInitialization(beanFactory);

				// Last step: publish corresponding event.
				发布上下文刷新事件：在此处时容器已经启动完成，发布容器refresh事件（ContextRefreshedEvent）
				创建上下文刷新事件，事件广播器负责将些事件广播到每个注册的事件监听器中。
				finishRefresh();
			}
	}
 
 ApplicationContext对象就完成了初始化工作：创建BeanFactory来装配BeanDefiniton，加工处理BeanDefiniton，注册了bean后处理器，初始化了消息资源，初始化了应用上下文事件广播器，注册了事件监听器，初始化了所有singleton的bean，最后发布上下文刷新事件
 
 
 
 
 
 
 
 beanfactory : bean 工厂
	 以Factory结尾，表示它是一个工厂类(接口)，用于管理Bean的一个工厂。在Spring中，BeanFactory是IOC容器的核心接口，它的职责包括：实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。
　　Spring为我们提供了许多易用的BeanFactory实现，XmlBeanFactory就是常用的一个，该实现将以XML方式描述组成应用的对象及对象间的依赖关系。XmlBeanFactory类将持有此XML配置元数据，并用它来构建一个完全可配置的系统或应用。
  基本就是这些了，接着使用getBean(String beanName)方法就可以取得bean的实例；BeanFactory提供的方法及其简单，仅提供了六种方法供客户调用：
　　boolean containsBean(String beanName) 判断工厂中是否包含给定名称的bean定义，若有则返回true
　　Object getBean(String) 返回给定名称注册的bean实例。根据bean的配置情况，如果是singleton模式将返回一个共享实例，否则将返回一个新建的实例，如果没有找到指定bean,该方法可能会抛出异常
　　Object getBean(String, Class) 返回以给定名称注册的bean实例，并转换为给定class类型
　　Class getType(String name) 返回给定名称的bean的Class,如果没有找到指定的bean实例，则排除NoSuchBeanDefinitionException异常
　　boolean isSingleton(String) 判断给定名称的bean定义是否为单例模式
　　String[] getAliases(String name) 返回给定bean名称的所有别名
 
 factorybean : 工厂bean
  它是实现了FactoryBean<T>接口的Bean，根据该Bean的ID从BeanFactory中获取的实际上是FactoryBean的getObject()返回的对象，而不是FactoryBean本身，如果要获取FactoryBean对象，请在id前面加一个&符号来获取。
 
 InitializingBean : bean 实例化之前调用
 DisposableBean   : bean 实例销毁时调用
 
 
 
 java 回调方法   :  钩子方法 
 
 
 		回调方法 :
 		  类A的a()方法调用类B的b()方法
			类B的b()方法执行完毕主动调用类A的callback()方法
			
	 钩子方法 : https://www.cnblogs.com/yanlong300/p/8446261.html
 	 钩子”是指：声明在抽象类中的方法，只有空的或默认的实现，通常应用在模板设计模式中，让子类可以对算法的不同点进行选择或挂钩，要不要挂钩由子类决定
 	 
 	 
 	 
spring  aware 接口解析 :    传送门   https://blog.csdn.net/javaloveiphone/article/details/52143126
		spring中提供了一系列的aware接口 : beanfactoryaware , applicationcontextnaware ,beannameaware ,resourceloaderaware , servletcontextaware 等等 ,
		实现这些 Aware接口的Bean在被实例化之后，可以取得一些相对应的资源，例如实现BeanFactoryAware的Bean在实例化后，Spring容器将会注入BeanFactory的实例，而实现ApplicationContextAware的Bean，在Bean被实例化后
		将会被注入 ApplicationContext的实例等等。
		通过重写setter方法，当前bean被实例化后实现相关实例的注入。
 	 
 	 
 	 
 	 
spring注解详解 : 传送门 https://blog.csdn.net/u010987379/article/details/52152795 <未理解透彻>
 	 
 	 
 	 
java 设计模式 :
 
 
  1.代理模式  :  (proxy)   <invocationhandler java 反射>
   传送门   https://www.cnblogs.com/cenyu/p/6289209.html         https://blog.csdn.net/yakoo5/article/details/9099133/
    1.1 静态代理模式 :  静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类.	
    1.2 动态代理 :  
    		1 ,代理对象不需要实现接口	
    		2.代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)
				3.动态代理也叫做:JDK代理,接口代理 
			  	JDK实现代理只需要使用newProxyInstance方法 
			  	  static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,InvocationHandler h )
			  	  参数说明 : ClassLoader loader,:指定当前目标对象使用类加载器,获取加载器的方法是固定的
											 Class<?>[] interfaces,:目标对象实现的接口的类型,使用泛型方式确认类型
											 InvocationHandler h:事件处理,执行目标对象的方法时,会触发事件处理器的方法,会把当前执行目标对象的方法作为参数传入
    			Proxy.newProxyInstance(ClassLoader loader, Class<?>[] interfaces,InvocationHandler h )
     
    		执行目标方法的时候 , 会调用InvocationHandler的invoke接口，所以我们的真正实现的方法就必须在invoke方法中去调用
    1.3 Cglib代理 :上面的静态代理和动态代理模式都是要求目标对象是实现一个接口的目标对象,但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候就可以使用以目标对象子类的方式类实现代理,这种方法就叫做:Cglib代理
						<没有接口 , 单独的类 , 用目标对象的子类实现代理--cglib代理模式>
						public class CglibProxy implements MethodInterceptor{  
							 private Enhancer enhancer = new Enhancer();  
							 public Object getProxy(Class clazz){  
							  //设置需要创建子类的类  
							  enhancer.setSuperclass(clazz);  
							  enhancer.setCallback(this);  
							  //通过字节码技术动态创建子类实例  
							  return enhancer.create();  
							 }  
							 //实现MethodInterceptor接口方法  
							 public Object intercept(Object obj, Method method, Object[] args,  
							   MethodProxy proxy) throws Throwable {  
							  System.out.println("前置代理");  
							  //通过代理类调用父类中的方法  
							  Object result = proxy.invokeSuper(obj, args);  
							  System.out.println("后置代理");  
							  return result;  
							 }  
							}
							
							
						intercept()方法拦截所有目标类方法的调用，obj表示目标类的实例，method为目标类方法的反射对象，args为方法的动态入参，proxy为代理类实例。proxy.invokeSuper(obj, args)通过代理类调用父类中的方法
						CGLib创建的动态代理对象性能比JDK创建的动态代理对象的性能高不少，但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。

  2. 模板模式 :(template)
  		 传送门 https://blog.csdn.net/eson_15/article/details/51323902
          模板方法模式确实很简单，仅仅使用了java的继承机制，但是它是一个应用非常广泛的模式，其中AbstractClass叫做抽象模板，它的方法分为两类：基本方法（由子类去实现）和
          模板方法（可以有一个或多个，也就是一个框架，实现对基本方法的调度，完成固定的逻辑）。为了防止恶意的操作，一般模板方法上都添加上final关键字，不允许被覆写
  		模板模式 : 定义抽象类 , 定义抽象方法 (子类实现--> 基本方法)
  														final 方法 : 模板方法 可以是多个, 由子类去调用
  														定义一个方法, 这个方法返回boolean  , 表示是否执行某一个抽象方法, 子类去重写  , 该方法称之为 钩子方法
  														
  														
  														
  3.责任链模式 (chain of resposibility)  	 传送门 : https://blog.csdn.net/u012410733/article/details/51746178
  
  	filter 过滤器   责任链模式的实现
  	
  	
  	
  4. 工厂模式 :  传送门 : https://blog.csdn.net/lemon_tree12138/article/details/46225213
       简单工厂模式 (Simple Factory Pattern)   :
       		创建对象的工具类 : 可以利用反射  Class.forName(clazz.getName()).newInstance()
       											 也可以new对象
       
       
       工厂方法模式 (Factory Method Pattern)   :  
           抽象工厂,定义方法 , 由子类工厂去实现,去具体创建什么对象 <可以使用泛型>
         
       
       
       
       抽象工厂模式 (Abstract Factory Pattern) :
       
       抽象工厂模式是怎么定义的：为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类
  
	5. 适配器模式 :   传送门 :  https://blog.csdn.net/zxt0601/article/details/52848004
		需要被适配的类、接口、对象（我们有的），简称 src（source） 
		最终需要的输出（我们想要的），简称 dst (destination，即Target) 
		适配器称之为 Adapter 。
		类适配器模式    Adapter类，通过继承 src类，实现 dst 类接口，完成src->dst的适配。 继承

		对象适配器模式  持有 src类，实现 dst 类接口，完成src->dst的适配。  持有。  

		接口适配器模式   以接口给到，在Adapter里，将src作为一个接口，实现。
	  
	  
	6. 装饰器模式 : 传送门   https://my.oschina.net/u/3777556/blog/1808718   spring io
	    类增强的方式 : 继承  包装  代理 
		
		抽象一个接口, 持有接口对象 接收其实现类 
  
  
  
  springmvc 请求执行过程 : 
  
  	request url : ---> 经过filter链 过滤器链 , 过滤器链执行完毕执行后
  	再去执行 dispatcherservlet.doservice 方法  
  			方法内执行 -->dodispatche 方法 
  			      dodispatche方法中 ---> getHandler(processedRequest)方法 ,	getHandler 会去循环handlerMappings<处理器映射器> ,返回一个handlerexecuteionchain 对象, 该对象包含了 HandlerInterceptor 的集合和数组, 和  object 的 handler 对象
  	   													
  	   													--->applyPreHandle 执行拦截器 
  	   																<HandlerAdapter处理器适配器>
  	   													--->	HandlerAdapter.handle 执行 handle 方法	 返回 modelandview 
  	   													        会去执行 method.invoke方法, cglib代理类 
  	   													         最终执行到目标方法
  	   					返回mv给前端控制器(dispatcherservlet)									         
  																
  
  
  
  spring 注解原理 :
  
  
  beanpostprocesser 原理 :
      populateBean(beanName, mbd, instanceWrapper);给bean进行属性赋值
	  initializeBean 执行初始化方法
	  {
	  applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);  // 执行目标方法初始化之前执行
	  invokeInitMethods(beanName, wrappedBean, mbd);执行自定义初始化
	  applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
	 }
  
   Spring底层对 BeanPostProcessor 的使用；
  		bean赋值，注入其他组件，@Autowired，生命周期注解功能，@Async,xxx BeanPostProcessor;
  
  
  
  
  
  
  spring 注解解释 :
  
  //配置类==配置文件
		@Configuration  //告诉Spring这是一个配置类
		@ComponentScans(
				value = {
						@ComponentScan(value="com.atguigu",includeFilters = {
		/						@Filter(type=FilterType.ANNOTATION,classes={Controller.class}),
								@Filter(type=FilterType.ASSIGNABLE_TYPE,classes={BookService.class}),/
								@Filter(type=FilterType.CUSTOM,classes={MyTypeFilter.class})
						},useDefaultFilters = false)	
				}
				)
		//@ComponentScan  value:指定要扫描的包
		//excludeFilters = Filter[] ：指定扫描的时候按照什么规则排除那些组件
		//includeFilters = Filter[] ：指定扫描的时候只需要包含哪些组件
		//FilterType.ANNOTATION：按照注解
		//FilterType.ASSIGNABLE_TYPE：按照给定的类型；
		//FilterType.ASPECTJ：使用ASPECTJ表达式
		//FilterType.REGEX：使用正则指定
		//FilterType.CUSTOM：使用自定义规则
		
		
		//给容器中注册一个Bean;类型为返回值的类型，id默认是用方法名作为id
		@Bean(value="person") <若只写@Bean 侧bean 的id是 person01 , 也可以使用 value 指定>
		public Person person01(){
			return new Person("lisi", 20);
		}
  			
  			
  			@bean
  			@lazy 懒加载  注解
  			@scope 作用域 注解 ,  设置是否单实例   
  			    prototype：多实例的：ioc容器启动并不会去调用方法创建对象放在容器中。
	 						每次获取的时候才会调用方法创建对象；
	  				singleton：单实例的（默认值）：ioc容器启动会调用方法创建对象放到ioc容器中。
	  					以后每次获取就是直接从容器（map.get()）中拿，
					  request：同一次请求创建一个实例
					  session：同一个session创建一个实例			
		  懒加载：
	  		单实例bean：默认在容器启动的时候创建对象；
	  		懒加载：容器启动不创建对象。第一次使用(获取)Bean创建对象，并初始化；	  		
  													
  													
  													
  		@conditional({condition})	可以在类上,也可以放在方法上	 按照一定的条件进行判断，满足条件给容器中注册bean									
  									ConfigurableEnvironment environment = applicationContext.getEnvironment();
									//动态获取环境变量的值；Windows 10
									String property = environment.getProperty("os.name");  固定 os.name 获取系统
  													
  			
  
	  给容器中注册组件；
	  1）、包扫描+组件标注注解（@Controller/@Service/@Repository/@Component）[自己写的类]
	  2）、@Bean[导入的第三方包里面的组件]
	  3）、@Import[快速给容器中导入一个组件]
	  		1）、@Import(要导入到容器中的组件)；容器中就会自动注册这个组件，id默认是全类名
	  		2）、ImportSelector:返回需要导入的组件的全类名数组；(导入选择器) 
	                实现 ImportSelector 接口 
	                   	//返回值，就是到导入到容器中的组件全类名
											//AnnotationMetadata:当前标注@Import注解的类的所有注解信息
											@Override
											public String[] selectImports(AnnotationMetadata importingClassMetadata) {
												// TODO Auto-generated method stub
												//importingClassMetadata
												//方法不要返回null值
												return new String[]{"com.atguigu.bean.Blue","com.atguigu.bean.Yellow"};
											}
											
	  		3）、ImportBeanDefinitionRegistrar:手动注册bean到容器中
	  		        实现 ImportBeanDefinitionRegistrar 接口
	  		           annotationmetadata :当前类的注册信息
	  		           benadefinitionregister : beandefinition 注册类
	  		              把所有需要添加到容器中的bean；调用 
	  		              BeanDefinitionRegistry.registerBeanDefinition手工注册进来   
	  		                 RootBeanDefinition 
	  		              
	 
	              
	  4）、使用Spring提供的 FactoryBean（工厂Bean）;
	  		1）、默认获取到的是工厂bean调用getObject创建的对象
	  		2）、要获取工厂Bean本身，我们需要给id前面加一个&
	  			&colorFactoryBean
	 			
  			
  			
	spring bean 的生命周期 :
		容器创建的时候创建单实例的bean,容器销毁的时候被销毁, 多实例的bean 容器创建的时候不会被实例化,只有在调用的时候被实例化, 容器关闭不会调用bean 的 销毁方法
		bean 生命周期的 4 种方法 : 
		  1> @bean 注解 , @init-method  初始化方法    @destroy-method 销毁方法
		  2>bean 实现 initializibean       disposablebean
		  3>可以通过  jsr 250 的  @postconstruct  初始化   @ prodistroy 注解在 bean 的方法上
		  4>beanpostprocesser 接口  bean 的后置处理器
			 postprocesserbeforeinitialization	   bean定义并给属性赋值之后 ,在初始化之前工作
			 postprocesserafterinitialization      bean初始化之后工
		  
  			
	属性赋值 :
       @propertysource(value={}), //使用@PropertySource读取外部配置文件中的k/v保存到运行的环境变量中;加载完外部的配置文件以后使用${}取出配置文件的值
	   @value 使用 @value 赋值 
	      	//1、基本数值  @Value("张三")
			//2、可以写SpEL； @Value("#{20-2}")
			//3、可以写${}；取出配置文件【properties】中的值（在运行环境变量里面的值）   @Value("${person.nickName}")
			也可以在环境中读取配置文件中的值
			 ConfigurableEnvironment environment = applicationContext.getEnvironment();
			 String property = environment.getProperty("person.nickName");
					
  			
  			
  	自动装配 :
		spring 利用依赖注入 (DI) ,完成对 ioc 容器中各个组件的依赖关系赋值
		
		  1）、@Autowired：自动注入：
			1）、默认优先按照类型去容器中找对应的组件:applicationContext.getBean(BookDao.class);找到就赋值
			2）、如果找到多个相同类型的组件，再将属性的名称作为组件的id去容器中查找
								applicationContext.getBean("bookDao")
			3）、@Qualifier("bookDao")：使用@Qualifier指定需要装配的组件的id，而不是使用属性名
			4）、自动装配默认一定要将属性赋值好，没有就会报错；
				可以使用@Autowired(required=false);
			5）、@Primary：让Spring进行自动装配的时候，默认使用首选的bean；
					也可以继续使用@Qualifier指定需要装配的bean的名字
			BookService{
				@Autowired
				BookDao  bookDao;
			}
  
		  2）、Spring还支持使用@Resource(JSR250)和@Inject(JSR330)[java规范的注解]
			@Resource:
				可以和@Autowired一样实现自动装配功能；默认是按照组件名称进行装配的；
				没有能支持@Primary功能没有支持@Autowired（reqiured=false）;
			@Inject:
				需要导入javax.inject的包，和Autowired的功能一样。没有required=false的功能；
		    @Autowired:Spring定义的； @Resource、@Inject都是java规范
			
		    AutowiredAnnotationBeanPostProcessor:解析完成自动装配功能；		
  
		  3）、 @Autowired:构造器，参数，方法，属性；都是从容器中获取参数组件的值
				1）、[标注在方法位置]：@Bean+方法参数；参数从容器中获取;默认不写@Autowired效果是一样的；都能自动装配
				2）、[标在构造器上]：如果组件只有一个有参构造器，这个有参构造器的@Autowired可以省略，参数位置的组件还是可以自动从容器中获取
				3）、放在参数位置：
		  
		  4）、自定义组件想要使用Spring容器底层的一些组件（ApplicationContext，BeanFactory，xxx）；
				自定义组件实现xxxAware；在创建对象的时候，会调用接口规定的方法注入相关组件；Aware；
				把Spring底层一些组件注入到自定义的Bean中；
				xxxAware：功能使用xxxProcessor；
					ApplicationContextAware==》ApplicationContextAwareProcessor；
					
					
					
  			
  			
  			
  													
  	
  	idea 结构中图  线条意思 : 实线   意思是 extends   虚线 表示 implement 
  	
  	
spring 三个核心组建 : core context beans		

			Bean 组件在 Spring 的 org.springframework.beans 包下 :
			    主要解决了 bean的定义  bean 的创建  bean 的解析 

					
				
				
				
web.xml web容器启动时候会自动加载  context-param 和 listener标签
	<context-param >  当服务器启动时，服务器会读取web.xml配置，当读到<listener></listener>和<context-param></context-param>	这两个节点的时候，容器会将这两个节点set到ServletContext(上下文对象)中，这样我们在程序中就能通过这个上下文对象去取得我们这个配置值。
    用于配置 web 启动的时候加载spring的配置文件 
      <!-- 指定Spring的配置文件 -->  
    <!-- 否则Spring会默认从WEB-INF下寻找配置文件,contextConfigLocation属性是Spring内部固定的 -->
    <context-param>  
        <param-name>contextConfigLocation</param-name>  
        <param-value>classpath:/spring-context.xml</param-value>  
    </context-param>  
	
	web容器启动该的时候会加载 listener 标签
	 <!-- 实例化Spring容器 -->  
    <!-- 应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml -->  
    <listener>  
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
    </listener>		




java 8 新特性 :

 lambda 表达式 (也称为闭包)

























	
maven 



  maven 标签解释  :
  
  <dependencyManegement> 只做声明依赖, 并不实现引入, 子项目需要显示的声明需要用的依赖
  <dependencies>  即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）
					
					
														
       adb      
 adb 命令查看 包名 对应包名 apk
		1.要看一个apk文件的相关信息最简单实用的方法是：
		aapt dump badging [yourapp.apk]
		
		如果只是想查看手机上应用的packageName：
		adb shell pm list packages
		
		如果想知道应用对应的apk文件在手机上的安装位置则可以在上面的命令后加-f参数
		adb shell pm list packages -f

把当前的截图保存在目录 sdcard下，名字为 1.png
adb shell screencap -p /sdcard/1.png  


查看当前运行的包名和Activity更清晰一些
adb shell dumpsys window | findstr mCurrentFocus